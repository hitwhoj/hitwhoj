import { createApp } from "./main";
import { renderToString, SSRContext } from "@vue/server-renderer";
import { APICoreConfig } from "./api/utils";

function escapeHtml(unsafe: string) {
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

export async function render(
  url: string,
  manifest: Record<string, string[]>,
  config: APICoreConfig
) {
  const { app, router, store } = createApp(config);

  // set the router to the desired URL before rendering
  router.push(url);
  await router.isReady();

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx: SSRContext = {};
  const html = await renderToString(app, ctx);

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest);

  const { status, title, meta } = store.state.ssr;

  const metadata =
    `<title>${escapeHtml(title)}</title>` +
    Object.keys(meta)
      .map((key) => {
        return `<meta name=${JSON.stringify(key)} content=${JSON.stringify(
          meta[key]
        )}>`;
      })
      .join("");

  const initialState = `<script>window.__INITIAL_STATE__=${JSON.stringify(
    store.state
  ).replace(/\//g, "\\/")};</script>`;

  return [html, preloadLinks, metadata, initialState, status];
}

function renderPreloadLinks(
  modules: string[],
  manifest: Record<string, string[]>
) {
  let links = "";
  const seen = new Set();
  modules.forEach((id) => {
    const files = manifest[id];
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file);
          links += renderPreloadLink(file);
        }
      });
    }
  });
  return links;
}

function renderPreloadLink(file: string) {
  if (file.endsWith(".js")) {
    return `<link rel="modulepreload" crossorigin href="${file}">`;
  } else if (file.endsWith(".css")) {
    return `<link rel="stylesheet" href="${file}">`;
  } else {
    // TODO
    return `<!-- unknown link type: ${file} -->`;
  }
}
