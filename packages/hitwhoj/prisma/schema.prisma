// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 用户
model User {
  id       Int    @id @default(autoincrement())
  username String @unique

  bio      String @default("")
  email    String @default("")
  avatar   String @default("")
  nickname String @default("")

  department String @default("")
  studentId  String @default("")

  password String

  joinedAt  DateTime       @default(now())
  role      SystemUserRole @default(User)
  premium   Boolean        @default(false)
  privilege Int            @default(3)

  sessions UserSession[]

  createdFiles    File[]
  createdComments Comment[]
  createdReplies  Reply[]
  createdRecords  Record[]

  heartedComments Comment[] @relation("heartedComments")
  heartedReplies  Reply[]   @relation("heartedReplies")
  starredComments Comment[] @relation("starredComments")
  starredReplies  Reply[]   @relation("starredReplies")

  participatedContests ContestParticipant[]
  attendedTeams        TeamMember[]
  addExtraMember     ExtraTeamMember[]
  sentMessages          PrivateMessage[]     @relation("send")
  receivedMessages      PrivateMessage[]     @relation("receive")
  chatMessage           ChatMessage[]
  enteredChatRoom       ChatRoomUser[]
  reports               Report[]             @relation("reports")
  submitedClarifacation Clarification[]      @relation("submit")
  appliedClarification  Clarification[]      @relation("apply")
  clarificationReply    ClarificationReply[]
}

enum SystemUserRole {
  /// 超级用户
  Root
  /// 管理员
  Admin
  /// 普通用户
  User
}

/// 用户登录会话
model UserSession {
  session    String   @id @default(uuid())
  lastActive DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

/// 所有文件
model File {
  id String @id @default(uuid())

  filename  String
  filesize  Int
  mimetype  String   @default("application/octet-stream")
  createdAt DateTime @default(now())

  /// 文件所属的用户
  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  /// 文件作为数据所属的题目
  dataProblem   Problem? @relation("data", fields: [dataProblemId], references: [id])
  dataProblemId Int?

  /// 文件作为附加文件所属的题目
  fileProblem   Problem? @relation("file", fields: [fileProblemId], references: [id])
  fileProblemId Int?
}

/// 题目
model Problem {
  id Int @id @default(autoincrement())

  title       String
  description String @default("")

  private     Boolean @default(true)
  allowSubmit Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  timeLimit   Int @default(1000)
  memoryLimit Int @default(268435456)

  tags ProblemTag[]

  data                File[]              @relation("data")
  files               File[]              @relation("file")
  includedContests    ContestProblem[]
  includedProblemSets ProblemSetProblem[]
  relatedRecords      Record[]

  team   Team? @relation(fields: [teamId], references: [id])
  teamId Int?
}

model ProblemTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problems Problem[]
}

model ProblemSet {
  id Int @id @default(autoincrement())

  title       String
  description String @default("")

  private Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags     ProblemSetTag[]
  problems ProblemSetProblem[]

  team   Team? @relation(fields: [teamId], references: [id])
  teamId Int?
}

model ProblemSetProblem {
  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int

  problemSet   ProblemSet @relation(fields: [problemSetId], references: [id])
  problemSetId Int

  rank Int

  @@id([problemSetId, problemId])
  @@unique([problemSetId, rank])
}

model ProblemSetTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  problemSets ProblemSet[]
}

model Contest {
  id Int @id @default(autoincrement())

  title       String
  description String @default("")

  /// 比赛赛制
  system               ContestSystem
  /// 比赛是否公开（不公开的比赛不会展示在首页，而且用户无法查看）
  private              Boolean                 @default(true)
  /// 比赛报名类型
  registrationType     ContestRegistrationType @default(Disallow)
  /// 比赛报名密码（只有当报名类型为 Password 时才有意义）
  registrationPassword String                  @default("")
  /// 是否允许比赛开始后中途加入
  allowJoinAfterStart  Boolean                 @default(false)

  beginTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags ContestTag[]

  problems ContestProblem[]

  participants ContestParticipant[]

  relatedRecords Record[]

  team          Team?           @relation(fields: [teamId], references: [id])
  teamId        Int?
  clarification Clarification[]
}

enum ContestRegistrationType {
  Public
  Password
  Disallow
}

enum ContestParticipantRole {
  Mod
  Jury
  Contestant
}

model ContestParticipant {
  contest   Contest @relation(fields: [contestId], references: [id])
  contestId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  role ContestParticipantRole

  @@id([contestId, userId])
}

model ContestTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  contests Contest[]
}

enum ContestSystem {
  /// ACM 赛制，每次错误提交都有罚时，榜单实时显示，最后一小时封榜，最后成绩以过题数、过题时间为准
  ACM
  /// OI 赛制，比赛结束前都无法查看提交结果和榜单，最后成绩以最后一次提交为准
  OI
  /// IOI 赛制，提交结果和榜单实时显示，最后成绩以最后一次提交为准
  IOI
  /// 作业赛制，我不知道具体是什么操作，反正就是比赛
  Homework
}

model ContestProblem {
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id])

  contestId Int
  contest   Contest @relation(fields: [contestId], references: [id])

  rank Int

  @@id([contestId, problemId])
  @@unique([contestId, rank])
}

enum InvitationType {
  // 无需邀请直接加入
  FREE
  // 需要邀请码
  CODE
  // 不允许加入
  NONE
}

model Clarification {
  id Int @id @default(autoincrement())

  contestId Int
  contest   Contest @relation(fields: [contestId], references: [id])

  rank Int

  userId Int
  user   User @relation(name: "submit", fields: [userId], references: [id])

  applicantId Int?
  applicant   User? @relation(name: "apply", fields: [applicantId], references: [id])

  resolved Boolean @default(false)

  content String

  createdAt DateTime             @default(now())
  replies   ClarificationReply[]
}

model ClarificationReply {
  id Int @id @default(autoincrement())

  replierId Int
  replier   User @relation(fields: [replierId], references: [id])

  clarificationId Int
  clarification   Clarification @relation(fields: [clarificationId], references: [id])

  content String

  createdAt DateTime @default(now())
}

model Team {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt   DateTime @default(now())
  description String   @default("")

  /// 邀请制类型
  invitationType InvitationType @default(NONE)
  /// 邀请码（只有当邀请制为 CODE 时才有意义）
  invitationCode String         @default("")

  /// 允许团队成员直接拉人进入
  allowMembersInvite Boolean @default(false)

  members     TeamMember[]
  contests    Contest[]
  problems    Problem[]
  problemSets ProblemSet[]
  extraMember ExtraTeamMember[]
  extraRole   ExtraTeamRole[]
  teamRole    TeamRole[]
}

model TeamMember {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId Int

  role String @default(Member)

  @@id([userId, teamId])
}
model TeamRole{
    team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId Int
    role TeamMemberRole @default(Member)
    description String
    privilege Int
    @@id([role, teamId])
}
enum TeamMemberRole {
  Owner
  Admin
  Member
}

model ExtraTeamRole{
    team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId Int
    extraRole String @default("")
    description String
    privilege Int
    @@id([extraRole, teamId])
}
//创建角色
model ExtraTeamMember {
   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
   userId Int

   team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
   teamId Int

   role String @default("")
   @@id([userId, teamId])
}

model Record {
  id Int @id @default(autoincrement())

  /// 评测状态（结果）
  status      String   @default("Pending")
  /// 得分
  score       Float    @default(0)
  /// 评测信息（错误日志）
  message     String   @default("")
  /// 评测总时间 (ms)
  /// 这个字段没啥用，就是看看的
  time        Int      @default(0)
  /// 评测最大内存 (byte)
  /// 这个字段也没啥用，单纯看看
  memory      Int      @default(0)
  /// 具体每一个测试点的评测结果，由于结构过于复杂，这里直接用 JSON 保存
  /// 应该遵从 SubtaskResult[] 类型
  /// 当 status 为 Compile Error 等类型时应该为一个空数组
  subtasks    Json     @default("[]")
  /// 提交语言
  language    String
  /// 递交时间
  submittedAt DateTime @default(now())

  // ==== relations ====

  submitter   User @relation(fields: [submitterId], references: [id])
  submitterId Int

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int

  contest   Contest? @relation(fields: [contestId], references: [id])
  contestId Int?
}

model CommentTag {
  id   Int    @id @default(autoincrement())
  name String @unique

  comments Comment[]
}

model Comment {
  id Int @id @default(autoincrement())

  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // === relations ===

  heartees User[] @relation("heartedComments")
  starrees User[] @relation("starredComments")

  creator   User @relation(fields: [creatorId], references: [id])
  creatorId Int

  tags CommentTag[]

  replies Reply[]
  reports Report[] @relation("reportedComments")
}

model Reply {
  id Int @id @default(autoincrement())

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ==== relations ====

  replyTo   Reply?  @relation("replies", fields: [replyToId], references: [id])
  replyToId Int?
  replies   Reply[] @relation("replies")

  domReply   Reply?  @relation("dsReplies", fields: [domId], references: [id])
  domId      Int?
  subReplies Reply[] @relation("dsReplies")

  heartees User[] @relation("heartedReplies")
  starrees User[] @relation("starredReplies")

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId Int
  reports   Report[] @relation("reportedReplies")
}

enum ReportType {
  C // Comment
  R // Reply
}

model Report {
  id Int @id @default(autoincrement())

  type ReportType

  reason String

  createdAt DateTime @default(now())

  // ==== relations ====

  creator   User @relation("reports", fields: [creatorId], references: [id])
  creatorId Int

  comment   Comment? @relation("reportedComments", fields: [commentId], references: [id])
  commentId Int?

  reply   Reply? @relation("reportedReplies", fields: [replyId], references: [id])
  replyId Int?
}

model PrivateMessage {
  id Int @id @default(autoincrement())

  /// 消息内容
  content String
  /// 发送时间
  sentAt  DateTime @default(now())

  // ==== relations ====

  /// 发送方
  from   User @relation("send", fields: [fromId], references: [id])
  fromId Int

  /// 接收方
  to   User @relation("receive", fields: [toId], references: [id])
  toId Int
}

model ChatRoom {
  id Int @id @default(autoincrement())

  name        String
  description String   @default("")
  createdAt   DateTime @default(now())

  private  Boolean @default(false)
  password String  @default("")

  chatMessage    ChatMessage[]
  userInChatRoom ChatRoomUser[]
}

enum ChatRoomRole {
  Owner
  Admin
  Member
}

model ChatRoomUser {
  role     ChatRoomRole @default(Member)
  joinedAt DateTime     @default(now())

  room   ChatRoom @relation(fields: [roomId], references: [id])
  roomId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@id([roomId, userId])
}

/// 群组的讨论消息
model ChatMessage {
  id Int @id @default(autoincrement())

  /// 缓存一下，表示发这条消息的时候用户的角色
  role    ChatRoomRole?
  content String
  sentAt  DateTime      @default(now())

  // ==== relations ====

  room   ChatRoom @relation(fields: [roomId], references: [id])
  roomId Int

  sender   User @relation(fields: [senderId], references: [id])
  senderId Int
}

model Judge {
  id   Int    @id @default(autoincrement())
  name String
  ip   String
  port Int
}
